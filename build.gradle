plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'com.felipestanzani'
version = '0.1.0'
description = 'Token-Oriented Object Notation (TOON) - A compact, human-readable format for LLM contexts'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jtoon'
            from components.java
            
            pom {
                name = 'JToon'
                description = project.description
                url = 'https://github.com/felipestanzani/JToon'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/felipestanzani/JToon/blob/main/LICENSE.md'
                    }
                }
                
                developers {
                    developer {
                        id = 'felipestanzani'
                        name = 'Felipe Cesar Stanzani Fonseca'
                        email = 'stanzani@gmail.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/felipestanzani/JToon.git'
                    developerConnection = 'scm:git:ssh://github.com:felipestanzani/JToon.git'
                    url = 'https://github.com/felipestanzani/JToon'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = 'LocalRepo'
            url = layout.buildDirectory.dir('maven-repo')
        }
    }
}

// Task to create a bundle for Maven Central Portal
tasks.register('createCentralBundle', Zip) {
    dependsOn 'publishMavenJavaPublicationToLocalRepoRepository'
    from layout.buildDirectory.dir('maven-repo')
    archiveFileName = "central-bundle.zip"
    destinationDirectory = layout.buildDirectory.dir('distributions')
}

// Task to upload bundle to Maven Central Portal
tasks.register('publishToMavenCentral') {
    dependsOn 'createCentralBundle'
    
    doLast {
        def token = (project.findProperty('mavenCentralToken') ?: System.getenv('MAVEN_CENTRAL_TOKEN'))?.trim()
        
        if (!token) {
            throw new GradleException('Maven Central token not found. Set MAVEN_CENTRAL_TOKEN environment variable or -PmavenCentralToken property.')
        }
    
        def bundleFile = layout.buildDirectory.file('distributions/central-bundle.zip').get().asFile
        
        if (!bundleFile.exists()) {
            throw new GradleException("Bundle file not found: ${bundleFile.absolutePath}")
        }
        
        def uploadUrl = 'https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC'
        
        println "Uploading bundle to Maven Central Portal..."
        println "Bundle file: ${bundleFile.absolutePath} (${bundleFile.length()} bytes)"
        println "Token length: ${token.length()} characters"
        println "Token starts with: ${token.take(15)}..."
        println "Token ends with: ...${token.takeRight(15)}"
        
        // Create a temporary file to capture the response
        def responseFile = File.createTempFile("maven-central-response", ".json")
        responseFile.deleteOnExit()
        
        // Build the authorization header separately to avoid interpolation issues
        def authHeader = "Authorization: Bearer ${token}"
        
        println "Running curl command..."
        
        def process = [
            'curl', '-X', 'POST',
            '--fail-with-body',
            '-s', // silent mode to suppress progress
            '-w', '\nHTTP_CODE:%{http_code}',
            '-o', responseFile.absolutePath,
            '-H', authHeader,
            '-F', "bundle=@${bundleFile.absolutePath}",
            uploadUrl
        ].execute()
        
        def output = new StringBuilder()
        def error = new StringBuilder()
        process.waitForProcessOutput(output, error)
        def exitCode = process.exitValue()
        
        println "Curl exit code: ${exitCode}"
        println "Curl stdout: ${output.toString()}"
        println "Curl stderr: ${error.toString()}"
        
        // Read the response
        def response = responseFile.exists() ? responseFile.text : ""
        println "Response file exists: ${responseFile.exists()}"
        println "Response file size: ${responseFile.exists() ? responseFile.length() : 0} bytes"
        println "Response content: '${response}'"
        
        // Extract HTTP code
        def httpCode = "UNKNOWN"
        def outputStr = output.toString()
        if (outputStr.contains('HTTP_CODE:')) {
            httpCode = outputStr.split('HTTP_CODE:')[1].trim()
        }
        
        println "Extracted HTTP Status: ${httpCode}"
        
        // Check for errors - be explicit about what we're checking
        def hasError = response.contains('"error"') || response.contains('error')
        def isSuccessCode = httpCode == '201' || httpCode == '200'
        
        println "Response contains 'error': ${hasError}"
        println "HTTP code is success (200/201): ${isSuccessCode}"
        
        if (exitCode != 0 || hasError || !isSuccessCode) {
            def errorMsg = "\n" + "="*80 + "\n"
            errorMsg += "❌ UPLOAD FAILED\n"
            errorMsg += "="*80 + "\n"
            errorMsg += "Exit code: ${exitCode}\n"
            errorMsg += "HTTP Status: ${httpCode}\n"
            errorMsg += "Response: ${response}\n"
            if (error.length() > 0) {
                errorMsg += "Curl stderr: ${error.toString()}\n"
            }
            errorMsg += "="*80 + "\n"
            throw new GradleException(errorMsg)
        }
        
        println "="*80
        println "✅ Bundle uploaded successfully!"
        println "="*80
        println "Deployment ID: ${response}"
    }
}

// Task to test Maven Central authentication without uploading
tasks.register('testMavenCentralAuth') {
    group = 'verification'
    description = 'Test Maven Central Portal authentication'
    
    doLast {
        def token = (project.findProperty('mavenCentralToken') ?: System.getenv('MAVEN_CENTRAL_TOKEN'))?.trim()
        
        if (!token) {
            throw new GradleException('Maven Central token not found. Set MAVEN_CENTRAL_TOKEN environment variable or -PmavenCentralToken property.')
        }
        
        println "Testing Maven Central Portal authentication..."
        println "Token length: ${token.length()} characters"
        println "Token starts with: ${token.take(15)}..."
        println "Token ends with: ...${token.takeRight(15)}"
        
        // Test with a simple GET request to check authentication
        // Using the deployments list endpoint which is known to work
        def testUrl = 'https://central.sonatype.com/api/v1/publisher/deployments'
        
        // Create a temporary file to capture the response
        def responseFile = File.createTempFile("maven-central-test", ".json")
        responseFile.deleteOnExit()
        
        // Build the authorization header
        def authHeader = "Authorization: Bearer ${token}"
        
        println "Testing authentication with GET request..."
        println "URL: ${testUrl}"
        
        def process = [
            'curl', '-X', 'GET',
            '-v',
            '--fail-with-body',
            '-w', '\n%{http_code}',
            '-o', responseFile.absolutePath,
            '-H', authHeader,
            testUrl
        ].execute()
        
        def output = new StringBuilder()
        def error = new StringBuilder()
        process.waitForProcessOutput(output, error)
        def exitCode = process.exitValue()
        
        // Read the response
        def response = responseFile.text
        def httpCode = output.toString().trim().split('\n').last()
        
        println "\n=== Authentication Test Results ==="
        println "Exit code: ${exitCode}"
        println "HTTP Status: ${httpCode}"
        println "Response: ${response}"
        println "Curl verbose output:"
        println error.toString()
        
        if (exitCode != 0 || response.contains('"error"')) {
            def errorMsg = "\n❌ Authentication test FAILED\n"
            errorMsg += "Exit code: ${exitCode}\n"
            errorMsg += "HTTP Status: ${httpCode}\n"
            errorMsg += "Response: ${response}\n"
            throw new GradleException(errorMsg)
        }
        
        println "\n✅ Authentication test PASSED"
        println "Your token is valid and working correctly."
    }
}

signing {
    def signingKey = project.findProperty('signingKey') ?: System.getenv('GPG_PRIVATE_KEY')
    def signingPassword = project.findProperty('signingPassword') ?: System.getenv('GPG_PASSPHRASE')
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}