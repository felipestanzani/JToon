plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'com.felipestanzani'
version = '0.1.0'
description = 'Token-Oriented Object Notation (TOON) - A compact, human-readable format for LLM contexts'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jtoon'
            from components.java
            
            pom {
                name = 'JToon'
                description = project.description
                url = 'https://github.com/felipestanzani/JToon'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/felipestanzani/JToon/blob/main/LICENSE.md'
                    }
                }
                
                developers {
                    developer {
                        id = 'felipestanzani'
                        name = 'Felipe Cesar Stanzani Fonseca'
                        email = 'stanzani@gmail.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/felipestanzani/JToon.git'
                    developerConnection = 'scm:git:ssh://github.com:felipestanzani/JToon.git'
                    url = 'https://github.com/felipestanzani/JToon'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = 'LocalRepo'
            url = layout.buildDirectory.dir('maven-repo')
        }
    }
}

// Task to create a bundle for Maven Central Portal
tasks.register('createCentralBundle', Zip) {
    dependsOn 'publishMavenJavaPublicationToLocalRepoRepository'
    from layout.buildDirectory.dir('maven-repo')
    archiveFileName = "central-bundle.zip"
    destinationDirectory = layout.buildDirectory.dir('distributions')
}

// Task to upload bundle to Maven Central Portal
tasks.register('publishToMavenCentral') {
    dependsOn 'createCentralBundle'
    
    doLast {
        def username = project.findProperty('mavenCentralUsername') ?: System.getenv('MAVEN_CENTRAL_USERNAME')
        def token = project.findProperty('mavenCentralToken') ?: System.getenv('MAVEN_CENTRAL_TOKEN')
        
        if (!username || !token) {
            throw new GradleException('Maven Central credentials not found. Set MAVEN_CENTRAL_USERNAME and MAVEN_CENTRAL_TOKEN environment variables.')
        }
        
        def credentials = "${username}:${token}".bytes.encodeBase64().toString()
        def bundleFile = layout.buildDirectory.file('distributions/central-bundle.zip').get().asFile
        
        def uploadUrl = 'https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC'
        
        println "Uploading bundle to Maven Central Portal..."
        
        def process = [
            'curl', '-X', 'POST',
            '-H', "Authorization: Bearer ${credentials}",
            '-F', "bundle=@${bundleFile.absolutePath}",
            uploadUrl
        ].execute()
        
        process.waitForProcessOutput(System.out, System.err)
        def exitCode = process.exitValue()
        
        if (exitCode != 0) {
            throw new GradleException("Failed to upload bundle to Maven Central. Exit code: ${exitCode}")
        }
        
        println "Bundle uploaded successfully!"
    }
}

signing {
    def signingKey = project.findProperty('signingKey') ?: System.getenv('GPG_PRIVATE_KEY')
    def signingPassword = project.findProperty('signingPassword') ?: System.getenv('GPG_PASSPHRASE')
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}