// Maven Central Verification and Testing Tasks
// This file contains tasks for testing Maven Central authentication

// Task to test Maven Central authentication without uploading
tasks.register('testMavenCentralAuth') {
    group = 'verification'
    description = 'Test Maven Central Portal authentication'
    
    doLast {
        def token = (project.findProperty('mavenCentralToken') ?: System.getenv('MAVEN_CENTRAL_TOKEN'))?.trim()
        
        if (!token) {
            throw new GradleException('Maven Central token not found. Set MAVEN_CENTRAL_TOKEN environment variable or -PmavenCentralToken property.')
        }
        
        println "Testing Maven Central Portal authentication..."
        println "Token length: ${token.length()} characters"
        println "Token starts with: ${token.take(15)}..."
        println "Token ends with: ...${token.takeRight(15)}"
        
        // Test with a simple GET request to check authentication
        // Using the deployments list endpoint which is known to work
        def testUrl = 'https://central.sonatype.com/api/v1/publisher/deployments'
        
        // Create a temporary file to capture the response
        def responseFile = File.createTempFile("maven-central-test", ".json")
        responseFile.deleteOnExit()
        
        // Build the authorization header
        def authHeader = "Authorization: Bearer ${token}"
        
        println "Testing authentication with GET request..."
        println "URL: ${testUrl}"
        
        def process = [
            'curl', '-X', 'GET',
            '-v',
            '--fail-with-body',
            '-w', '\n%{http_code}',
            '-o', responseFile.absolutePath,
            '-H', authHeader,
            testUrl
        ].execute()
        
        def output = new StringBuilder()
        def error = new StringBuilder()
        process.waitForProcessOutput(output, error)
        def exitCode = process.exitValue()
        
        // Read the response
        def response = responseFile.text
        def httpCode = output.toString().trim().split('\n').last()
        
        println "\n=== Authentication Test Results ==="
        println "Exit code: ${exitCode}"
        println "HTTP Status: ${httpCode}"
        println "Response: ${response}"
        println "Curl verbose output:"
        println error.toString()
        
        if (exitCode != 0 || response.contains('"error"')) {
            def errorMsg = "\n❌ Authentication test FAILED\n"
            errorMsg += "Exit code: ${exitCode}\n"
            errorMsg += "HTTP Status: ${httpCode}\n"
            errorMsg += "Response: ${response}\n"
            throw new GradleException(errorMsg)
        }
        
        println "\n✅ Authentication test PASSED"
        println "Your token is valid and working correctly."
    }
}

